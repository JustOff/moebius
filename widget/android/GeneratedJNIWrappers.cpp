// GENERATED CODE
// Generated by the Java program at /build/annotationProcessors at compile time
// from annotations on Java methods. To update, change the annotations on the
// corresponding Java methods and rerun the build. Manually updating this file
// will cause your build to fail.

#include "GeneratedJNIWrappers.h"
#include "mozilla/jni/Accessors.h"

namespace mozilla {
namespace java {

const char AlarmReceiver::name[] =
        "org/mozilla/goanna/AlarmReceiver";

constexpr char AlarmReceiver::NotifyAlarmFired_t::name[];
constexpr char AlarmReceiver::NotifyAlarmFired_t::signature[];

const char AndroidGamepadManager::name[] =
        "org/mozilla/goanna/AndroidGamepadManager";

constexpr char AndroidGamepadManager::OnAxisChange_t::name[];
constexpr char AndroidGamepadManager::OnAxisChange_t::signature[];

constexpr char AndroidGamepadManager::OnButtonChange_t::name[];
constexpr char AndroidGamepadManager::OnButtonChange_t::signature[];

constexpr char AndroidGamepadManager::OnGamepadAdded_t::name[];
constexpr char AndroidGamepadManager::OnGamepadAdded_t::signature[];

auto AndroidGamepadManager::OnGamepadAdded(int32_t a0, int32_t a1) -> void
{
    return mozilla::jni::Method<OnGamepadAdded_t>::Call(AndroidGamepadManager::Context(), nullptr, a0, a1);
}

constexpr char AndroidGamepadManager::OnGamepadChange_t::name[];
constexpr char AndroidGamepadManager::OnGamepadChange_t::signature[];

constexpr char AndroidGamepadManager::Start_t::name[];
constexpr char AndroidGamepadManager::Start_t::signature[];

auto AndroidGamepadManager::Start() -> void
{
    return mozilla::jni::Method<Start_t>::Call(AndroidGamepadManager::Context(), nullptr);
}

constexpr char AndroidGamepadManager::Stop_t::name[];
constexpr char AndroidGamepadManager::Stop_t::signature[];

auto AndroidGamepadManager::Stop() -> void
{
    return mozilla::jni::Method<Stop_t>::Call(AndroidGamepadManager::Context(), nullptr);
}

const char EventDispatcher::name[] =
        "org/mozilla/goanna/EventDispatcher";

constexpr char EventDispatcher::DispatchToGoanna_t::name[];
constexpr char EventDispatcher::DispatchToGoanna_t::signature[];

constexpr char EventDispatcher::DispatchToThreads_t::name[];
constexpr char EventDispatcher::DispatchToThreads_t::signature[];

auto EventDispatcher::DispatchToThreads(mozilla::jni::String::Param a0, mozilla::jni::Object::Param a1, mozilla::jni::Object::Param a2, mozilla::jni::Object::Param a3) const -> bool
{
    return mozilla::jni::Method<DispatchToThreads_t>::Call(EventDispatcher::mCtx, nullptr, a0, a1, a2, a3);
}

constexpr char EventDispatcher::DisposeNative_t::name[];
constexpr char EventDispatcher::DisposeNative_t::signature[];

constexpr char EventDispatcher::GetInstance_t::name[];
constexpr char EventDispatcher::GetInstance_t::signature[];

auto EventDispatcher::GetInstance() -> EventDispatcher::LocalRef
{
    return mozilla::jni::Method<GetInstance_t>::Call(EventDispatcher::Context(), nullptr);
}

constexpr char EventDispatcher::HasGoannaListener_t::name[];
constexpr char EventDispatcher::HasGoannaListener_t::signature[];

constexpr char EventDispatcher::SetAttachedToGoanna_t::name[];
constexpr char EventDispatcher::SetAttachedToGoanna_t::signature[];

auto EventDispatcher::SetAttachedToGoanna(int32_t a0) const -> void
{
    return mozilla::jni::Method<SetAttachedToGoanna_t>::Call(EventDispatcher::mCtx, nullptr, a0);
}

const char EventDispatcher::NativeCallbackDelegate::name[] =
        "org/mozilla/goanna/EventDispatcher$NativeCallbackDelegate";

constexpr char EventDispatcher::NativeCallbackDelegate::New_t::name[];
constexpr char EventDispatcher::NativeCallbackDelegate::New_t::signature[];

auto EventDispatcher::NativeCallbackDelegate::New() -> NativeCallbackDelegate::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(NativeCallbackDelegate::Context(), nullptr);
}

constexpr char EventDispatcher::NativeCallbackDelegate::Finalize_t::name[];
constexpr char EventDispatcher::NativeCallbackDelegate::Finalize_t::signature[];

constexpr char EventDispatcher::NativeCallbackDelegate::SendError_t::name[];
constexpr char EventDispatcher::NativeCallbackDelegate::SendError_t::signature[];

constexpr char EventDispatcher::NativeCallbackDelegate::SendSuccess_t::name[];
constexpr char EventDispatcher::NativeCallbackDelegate::SendSuccess_t::signature[];

const char GoannaAppShell::name[] =
        "org/mozilla/goanna/GoannaAppShell";

constexpr char GoannaAppShell::AddFullScreenPluginView_t::name[];
constexpr char GoannaAppShell::AddFullScreenPluginView_t::signature[];

auto GoannaAppShell::AddFullScreenPluginView(mozilla::jni::Object::Param a0) -> void
{
    return mozilla::jni::Method<AddFullScreenPluginView_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::CancelVibrate_t::name[];
constexpr char GoannaAppShell::CancelVibrate_t::signature[];

auto GoannaAppShell::CancelVibrate() -> void
{
    return mozilla::jni::Method<CancelVibrate_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::CheckURIVisited_t::name[];
constexpr char GoannaAppShell::CheckURIVisited_t::signature[];

auto GoannaAppShell::CheckURIVisited(mozilla::jni::String::Param a0) -> void
{
    return mozilla::jni::Method<CheckURIVisited_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::CloseCamera_t::name[];
constexpr char GoannaAppShell::CloseCamera_t::signature[];

auto GoannaAppShell::CloseCamera() -> void
{
    return mozilla::jni::Method<CloseCamera_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::CloseNotification_t::name[];
constexpr char GoannaAppShell::CloseNotification_t::signature[];

auto GoannaAppShell::CloseNotification(mozilla::jni::String::Param a0) -> void
{
    return mozilla::jni::Method<CloseNotification_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::ConnectionGetMimeType_t::name[];
constexpr char GoannaAppShell::ConnectionGetMimeType_t::signature[];

auto GoannaAppShell::ConnectionGetMimeType(mozilla::jni::Object::Param a0) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<ConnectionGetMimeType_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::CreateInputStream_t::name[];
constexpr char GoannaAppShell::CreateInputStream_t::signature[];

auto GoannaAppShell::CreateInputStream(mozilla::jni::Object::Param a0) -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<CreateInputStream_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::CreateShortcut_t::name[];
constexpr char GoannaAppShell::CreateShortcut_t::signature[];

auto GoannaAppShell::CreateShortcut(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> void
{
    return mozilla::jni::Method<CreateShortcut_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1);
}

constexpr char GoannaAppShell::DisableAlarm_t::name[];
constexpr char GoannaAppShell::DisableAlarm_t::signature[];

auto GoannaAppShell::DisableAlarm() -> void
{
    return mozilla::jni::Method<DisableAlarm_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::DisableBatteryNotifications_t::name[];
constexpr char GoannaAppShell::DisableBatteryNotifications_t::signature[];

auto GoannaAppShell::DisableBatteryNotifications() -> void
{
    return mozilla::jni::Method<DisableBatteryNotifications_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::DisableNetworkNotifications_t::name[];
constexpr char GoannaAppShell::DisableNetworkNotifications_t::signature[];

auto GoannaAppShell::DisableNetworkNotifications() -> void
{
    return mozilla::jni::Method<DisableNetworkNotifications_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::DisableScreenOrientationNotifications_t::name[];
constexpr char GoannaAppShell::DisableScreenOrientationNotifications_t::signature[];

auto GoannaAppShell::DisableScreenOrientationNotifications() -> void
{
    return mozilla::jni::Method<DisableScreenOrientationNotifications_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::DisableSensor_t::name[];
constexpr char GoannaAppShell::DisableSensor_t::signature[];

auto GoannaAppShell::DisableSensor(int32_t a0) -> void
{
    return mozilla::jni::Method<DisableSensor_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::EnableBatteryNotifications_t::name[];
constexpr char GoannaAppShell::EnableBatteryNotifications_t::signature[];

auto GoannaAppShell::EnableBatteryNotifications() -> void
{
    return mozilla::jni::Method<EnableBatteryNotifications_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::EnableLocation_t::name[];
constexpr char GoannaAppShell::EnableLocation_t::signature[];

auto GoannaAppShell::EnableLocation(bool a0) -> void
{
    return mozilla::jni::Method<EnableLocation_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::EnableLocationHighAccuracy_t::name[];
constexpr char GoannaAppShell::EnableLocationHighAccuracy_t::signature[];

auto GoannaAppShell::EnableLocationHighAccuracy(bool a0) -> void
{
    return mozilla::jni::Method<EnableLocationHighAccuracy_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::EnableNetworkNotifications_t::name[];
constexpr char GoannaAppShell::EnableNetworkNotifications_t::signature[];

auto GoannaAppShell::EnableNetworkNotifications() -> void
{
    return mozilla::jni::Method<EnableNetworkNotifications_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::EnableScreenOrientationNotifications_t::name[];
constexpr char GoannaAppShell::EnableScreenOrientationNotifications_t::signature[];

auto GoannaAppShell::EnableScreenOrientationNotifications() -> void
{
    return mozilla::jni::Method<EnableScreenOrientationNotifications_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::EnableSensor_t::name[];
constexpr char GoannaAppShell::EnableSensor_t::signature[];

auto GoannaAppShell::EnableSensor(int32_t a0) -> void
{
    return mozilla::jni::Method<EnableSensor_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::GetApplicationContext_t::name[];
constexpr char GoannaAppShell::GetApplicationContext_t::signature[];

auto GoannaAppShell::GetApplicationContext() -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<GetApplicationContext_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetConnection_t::name[];
constexpr char GoannaAppShell::GetConnection_t::signature[];

auto GoannaAppShell::GetConnection(mozilla::jni::String::Param a0) -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<GetConnection_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::GetContext_t::name[];
constexpr char GoannaAppShell::GetContext_t::signature[];

auto GoannaAppShell::GetContext() -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<GetContext_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetCurrentBatteryInformation_t::name[];
constexpr char GoannaAppShell::GetCurrentBatteryInformation_t::signature[];

auto GoannaAppShell::GetCurrentBatteryInformation() -> mozilla::jni::DoubleArray::LocalRef
{
    return mozilla::jni::Method<GetCurrentBatteryInformation_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetCurrentNetworkInformation_t::name[];
constexpr char GoannaAppShell::GetCurrentNetworkInformation_t::signature[];

auto GoannaAppShell::GetCurrentNetworkInformation() -> mozilla::jni::DoubleArray::LocalRef
{
    return mozilla::jni::Method<GetCurrentNetworkInformation_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetDensity_t::name[];
constexpr char GoannaAppShell::GetDensity_t::signature[];

auto GoannaAppShell::GetDensity() -> float
{
    return mozilla::jni::Method<GetDensity_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetDpi_t::name[];
constexpr char GoannaAppShell::GetDpi_t::signature[];

auto GoannaAppShell::GetDpi() -> int32_t
{
    return mozilla::jni::Method<GetDpi_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetExceptionStackTrace_t::name[];
constexpr char GoannaAppShell::GetExceptionStackTrace_t::signature[];

auto GoannaAppShell::GetExceptionStackTrace(mozilla::jni::Throwable::Param a0) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetExceptionStackTrace_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::GetExtensionFromMimeType_t::name[];
constexpr char GoannaAppShell::GetExtensionFromMimeType_t::signature[];

auto GoannaAppShell::GetExtensionFromMimeType(mozilla::jni::String::Param a0) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetExtensionFromMimeType_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::GetHWDecoderCapability_t::name[];
constexpr char GoannaAppShell::GetHWDecoderCapability_t::signature[];

auto GoannaAppShell::GetHWDecoderCapability() -> bool
{
    return mozilla::jni::Method<GetHWDecoderCapability_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetHWEncoderCapability_t::name[];
constexpr char GoannaAppShell::GetHWEncoderCapability_t::signature[];

auto GoannaAppShell::GetHWEncoderCapability() -> bool
{
    return mozilla::jni::Method<GetHWEncoderCapability_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetHandlersForMimeType_t::name[];
constexpr char GoannaAppShell::GetHandlersForMimeType_t::signature[];

auto GoannaAppShell::GetHandlersForMimeType(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> mozilla::jni::ObjectArray::LocalRef
{
    return mozilla::jni::Method<GetHandlersForMimeType_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1);
}

constexpr char GoannaAppShell::GetHandlersForURL_t::name[];
constexpr char GoannaAppShell::GetHandlersForURL_t::signature[];

auto GoannaAppShell::GetHandlersForURL(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> mozilla::jni::ObjectArray::LocalRef
{
    return mozilla::jni::Method<GetHandlersForURL_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1);
}

constexpr char GoannaAppShell::GetIconForExtension_t::name[];
constexpr char GoannaAppShell::GetIconForExtension_t::signature[];

auto GoannaAppShell::GetIconForExtension(mozilla::jni::String::Param a0, int32_t a1) -> mozilla::jni::ByteArray::LocalRef
{
    return mozilla::jni::Method<GetIconForExtension_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1);
}

constexpr char GoannaAppShell::GetMaxTouchPoints_t::name[];
constexpr char GoannaAppShell::GetMaxTouchPoints_t::signature[];

auto GoannaAppShell::GetMaxTouchPoints() -> int32_t
{
    return mozilla::jni::Method<GetMaxTouchPoints_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetMimeTypeFromExtensions_t::name[];
constexpr char GoannaAppShell::GetMimeTypeFromExtensions_t::signature[];

auto GoannaAppShell::GetMimeTypeFromExtensions(mozilla::jni::String::Param a0) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetMimeTypeFromExtensions_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::GetNetworkLinkType_t::name[];
constexpr char GoannaAppShell::GetNetworkLinkType_t::signature[];

auto GoannaAppShell::GetNetworkLinkType() -> int32_t
{
    return mozilla::jni::Method<GetNetworkLinkType_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetProxyForURI_t::name[];
constexpr char GoannaAppShell::GetProxyForURI_t::signature[];

auto GoannaAppShell::GetProxyForURI(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, int32_t a3) -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetProxyForURI_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1, a2, a3);
}

constexpr char GoannaAppShell::GetScreenAngle_t::name[];
constexpr char GoannaAppShell::GetScreenAngle_t::signature[];

auto GoannaAppShell::GetScreenAngle() -> int32_t
{
    return mozilla::jni::Method<GetScreenAngle_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetScreenDepth_t::name[];
constexpr char GoannaAppShell::GetScreenDepth_t::signature[];

auto GoannaAppShell::GetScreenDepth() -> int32_t
{
    return mozilla::jni::Method<GetScreenDepth_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetScreenOrientation_t::name[];
constexpr char GoannaAppShell::GetScreenOrientation_t::signature[];

auto GoannaAppShell::GetScreenOrientation() -> int16_t
{
    return mozilla::jni::Method<GetScreenOrientation_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetScreenSize_t::name[];
constexpr char GoannaAppShell::GetScreenSize_t::signature[];

auto GoannaAppShell::GetScreenSize() -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<GetScreenSize_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetShowPasswordSetting_t::name[];
constexpr char GoannaAppShell::GetShowPasswordSetting_t::signature[];

auto GoannaAppShell::GetShowPasswordSetting() -> bool
{
    return mozilla::jni::Method<GetShowPasswordSetting_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::GetSystemColors_t::name[];
constexpr char GoannaAppShell::GetSystemColors_t::signature[];

auto GoannaAppShell::GetSystemColors() -> mozilla::jni::IntArray::LocalRef
{
    return mozilla::jni::Method<GetSystemColors_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::HandleGoannaMessage_t::name[];
constexpr char GoannaAppShell::HandleGoannaMessage_t::signature[];

auto GoannaAppShell::HandleGoannaMessage(mozilla::jni::Object::Param a0) -> void
{
    return mozilla::jni::Method<HandleGoannaMessage_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::HandleUncaughtException_t::name[];
constexpr char GoannaAppShell::HandleUncaughtException_t::signature[];

auto GoannaAppShell::HandleUncaughtException(mozilla::jni::Throwable::Param a0) -> void
{
    return mozilla::jni::Method<HandleUncaughtException_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::HideProgressDialog_t::name[];
constexpr char GoannaAppShell::HideProgressDialog_t::signature[];

auto GoannaAppShell::HideProgressDialog() -> void
{
    return mozilla::jni::Method<HideProgressDialog_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::InitCamera_t::name[];
constexpr char GoannaAppShell::InitCamera_t::signature[];

auto GoannaAppShell::InitCamera(mozilla::jni::String::Param a0, int32_t a1, int32_t a2, int32_t a3) -> mozilla::jni::IntArray::LocalRef
{
    return mozilla::jni::Method<InitCamera_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1, a2, a3);
}

constexpr char GoannaAppShell::IsNetworkLinkKnown_t::name[];
constexpr char GoannaAppShell::IsNetworkLinkKnown_t::signature[];

auto GoannaAppShell::IsNetworkLinkKnown() -> bool
{
    return mozilla::jni::Method<IsNetworkLinkKnown_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::IsNetworkLinkUp_t::name[];
constexpr char GoannaAppShell::IsNetworkLinkUp_t::signature[];

auto GoannaAppShell::IsNetworkLinkUp() -> bool
{
    return mozilla::jni::Method<IsNetworkLinkUp_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::IsTablet_t::name[];
constexpr char GoannaAppShell::IsTablet_t::signature[];

auto GoannaAppShell::IsTablet() -> bool
{
    return mozilla::jni::Method<IsTablet_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::KillAnyZombies_t::name[];
constexpr char GoannaAppShell::KillAnyZombies_t::signature[];

auto GoannaAppShell::KillAnyZombies() -> void
{
    return mozilla::jni::Method<KillAnyZombies_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::LaunchOrBringToFront_t::name[];
constexpr char GoannaAppShell::LaunchOrBringToFront_t::signature[];

auto GoannaAppShell::LaunchOrBringToFront() -> void
{
    return mozilla::jni::Method<LaunchOrBringToFront_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::LoadPluginClass_t::name[];
constexpr char GoannaAppShell::LoadPluginClass_t::signature[];

auto GoannaAppShell::LoadPluginClass(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> mozilla::jni::Class::LocalRef
{
    return mozilla::jni::Method<LoadPluginClass_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1);
}

constexpr char GoannaAppShell::LockScreenOrientation_t::name[];
constexpr char GoannaAppShell::LockScreenOrientation_t::signature[];

auto GoannaAppShell::LockScreenOrientation(int32_t a0) -> void
{
    return mozilla::jni::Method<LockScreenOrientation_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::MarkURIVisited_t::name[];
constexpr char GoannaAppShell::MarkURIVisited_t::signature[];

auto GoannaAppShell::MarkURIVisited(mozilla::jni::String::Param a0) -> void
{
    return mozilla::jni::Method<MarkURIVisited_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::MoveTaskToBack_t::name[];
constexpr char GoannaAppShell::MoveTaskToBack_t::signature[];

auto GoannaAppShell::MoveTaskToBack() -> void
{
    return mozilla::jni::Method<MoveTaskToBack_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::NotifyObservers_t::name[];
constexpr char GoannaAppShell::NotifyObservers_t::signature[];

constexpr char GoannaAppShell::NotifyPushObservers_t::name[];
constexpr char GoannaAppShell::NotifyPushObservers_t::signature[];

constexpr char GoannaAppShell::NotifyAlertListener_t::name[];
constexpr char GoannaAppShell::NotifyAlertListener_t::signature[];

constexpr char GoannaAppShell::NotifyUriVisited_t::name[];
constexpr char GoannaAppShell::NotifyUriVisited_t::signature[];

constexpr char GoannaAppShell::NotifyWakeLockChanged_t::name[];
constexpr char GoannaAppShell::NotifyWakeLockChanged_t::signature[];

auto GoannaAppShell::NotifyWakeLockChanged(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> void
{
    return mozilla::jni::Method<NotifyWakeLockChanged_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1);
}

constexpr char GoannaAppShell::OnFullScreenPluginHidden_t::name[];
constexpr char GoannaAppShell::OnFullScreenPluginHidden_t::signature[];

constexpr char GoannaAppShell::OnLocationChanged_t::name[];
constexpr char GoannaAppShell::OnLocationChanged_t::signature[];

constexpr char GoannaAppShell::OnSensorChanged_t::name[];
constexpr char GoannaAppShell::OnSensorChanged_t::signature[];

constexpr char GoannaAppShell::OpenUriExternal_t::name[];
constexpr char GoannaAppShell::OpenUriExternal_t::signature[];

auto GoannaAppShell::OpenUriExternal(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, mozilla::jni::String::Param a3, mozilla::jni::String::Param a4, mozilla::jni::String::Param a5) -> bool
{
    return mozilla::jni::Method<OpenUriExternal_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1, a2, a3, a4, a5);
}

constexpr char GoannaAppShell::PerformHapticFeedback_t::name[];
constexpr char GoannaAppShell::PerformHapticFeedback_t::signature[];

auto GoannaAppShell::PerformHapticFeedback(bool a0) -> void
{
    return mozilla::jni::Method<PerformHapticFeedback_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::RemoveFullScreenPluginView_t::name[];
constexpr char GoannaAppShell::RemoveFullScreenPluginView_t::signature[];

auto GoannaAppShell::RemoveFullScreenPluginView(mozilla::jni::Object::Param a0) -> void
{
    return mozilla::jni::Method<RemoveFullScreenPluginView_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::ReportJavaCrash_t::name[];
constexpr char GoannaAppShell::ReportJavaCrash_t::signature[];

constexpr char GoannaAppShell::ScheduleRestart_t::name[];
constexpr char GoannaAppShell::ScheduleRestart_t::signature[];

auto GoannaAppShell::ScheduleRestart() -> void
{
    return mozilla::jni::Method<ScheduleRestart_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::SetAlarm_t::name[];
constexpr char GoannaAppShell::SetAlarm_t::signature[];

auto GoannaAppShell::SetAlarm(int32_t a0, int32_t a1) -> bool
{
    return mozilla::jni::Method<SetAlarm_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1);
}

constexpr char GoannaAppShell::SetFullScreen_t::name[];
constexpr char GoannaAppShell::SetFullScreen_t::signature[];

auto GoannaAppShell::SetFullScreen(bool a0) -> void
{
    return mozilla::jni::Method<SetFullScreen_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::SetKeepScreenOn_t::name[];
constexpr char GoannaAppShell::SetKeepScreenOn_t::signature[];

auto GoannaAppShell::SetKeepScreenOn(bool a0) -> void
{
    return mozilla::jni::Method<SetKeepScreenOn_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::SetScreenDepthOverride_t::name[];
constexpr char GoannaAppShell::SetScreenDepthOverride_t::signature[];

auto GoannaAppShell::SetScreenDepthOverride(int32_t a0) -> void
{
    return mozilla::jni::Method<SetScreenDepthOverride_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::SetURITitle_t::name[];
constexpr char GoannaAppShell::SetURITitle_t::signature[];

auto GoannaAppShell::SetURITitle(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1) -> void
{
    return mozilla::jni::Method<SetURITitle_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1);
}

constexpr char GoannaAppShell::ShowNotification_t::name[];
constexpr char GoannaAppShell::ShowNotification_t::signature[];

auto GoannaAppShell::ShowNotification(mozilla::jni::String::Param a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, mozilla::jni::String::Param a3, mozilla::jni::String::Param a4, mozilla::jni::String::Param a5, mozilla::jni::String::Param a6) -> void
{
    return mozilla::jni::Method<ShowNotification_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1, a2, a3, a4, a5, a6);
}

constexpr char GoannaAppShell::StartGoannaServiceChildProcess_t::name[];
constexpr char GoannaAppShell::StartGoannaServiceChildProcess_t::signature[];

auto GoannaAppShell::StartGoannaServiceChildProcess(mozilla::jni::String::Param a0, mozilla::jni::ObjectArray::Param a1, int32_t a2, int32_t a3) -> int32_t
{
    return mozilla::jni::Method<StartGoannaServiceChildProcess_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1, a2, a3);
}

constexpr char GoannaAppShell::SyncNotifyObservers_t::name[];
constexpr char GoannaAppShell::SyncNotifyObservers_t::signature[];

constexpr char GoannaAppShell::UnlockProfile_t::name[];
constexpr char GoannaAppShell::UnlockProfile_t::signature[];

auto GoannaAppShell::UnlockProfile() -> bool
{
    return mozilla::jni::Method<UnlockProfile_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::UnlockScreenOrientation_t::name[];
constexpr char GoannaAppShell::UnlockScreenOrientation_t::signature[];

auto GoannaAppShell::UnlockScreenOrientation() -> void
{
    return mozilla::jni::Method<UnlockScreenOrientation_t>::Call(GoannaAppShell::Context(), nullptr);
}

constexpr char GoannaAppShell::Vibrate_t::name[];
constexpr char GoannaAppShell::Vibrate_t::signature[];

auto GoannaAppShell::Vibrate(int64_t a0) -> void
{
    return mozilla::jni::Method<Vibrate_t>::Call(GoannaAppShell::Context(), nullptr, a0);
}

constexpr char GoannaAppShell::Vibrate2_t::name[];
constexpr char GoannaAppShell::Vibrate2_t::signature[];

auto GoannaAppShell::Vibrate(mozilla::jni::LongArray::Param a0, int32_t a1) -> void
{
    return mozilla::jni::Method<Vibrate2_t>::Call(GoannaAppShell::Context(), nullptr, a0, a1);
}

const char GoannaAppShell::CameraCallback::name[] =
        "org/mozilla/goanna/GoannaAppShell$CameraCallback";

constexpr char GoannaAppShell::CameraCallback::OnFrameData_t::name[];
constexpr char GoannaAppShell::CameraCallback::OnFrameData_t::signature[];

const char GoannaBatteryManager::name[] =
        "org/mozilla/goanna/GoannaBatteryManager";

constexpr char GoannaBatteryManager::OnBatteryChange_t::name[];
constexpr char GoannaBatteryManager::OnBatteryChange_t::signature[];

const char GoannaEditable::name[] =
        "org/mozilla/goanna/GoannaEditable";

constexpr char GoannaEditable::New_t::name[];
constexpr char GoannaEditable::New_t::signature[];

auto GoannaEditable::New(mozilla::jni::Object::Param a0) -> GoannaEditable::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(GoannaEditable::Context(), nullptr, a0);
}

constexpr char GoannaEditable::DisposeNative_t::name[];
constexpr char GoannaEditable::DisposeNative_t::signature[];

constexpr char GoannaEditable::NotifyIME_t::name[];
constexpr char GoannaEditable::NotifyIME_t::signature[];

auto GoannaEditable::NotifyIME(int32_t a0) const -> void
{
    return mozilla::jni::Method<NotifyIME_t>::Call(GoannaEditable::mCtx, nullptr, a0);
}

constexpr char GoannaEditable::NotifyIMEContext_t::name[];
constexpr char GoannaEditable::NotifyIMEContext_t::signature[];

auto GoannaEditable::NotifyIMEContext(int32_t a0, mozilla::jni::String::Param a1, mozilla::jni::String::Param a2, mozilla::jni::String::Param a3) const -> void
{
    return mozilla::jni::Method<NotifyIMEContext_t>::Call(GoannaEditable::mCtx, nullptr, a0, a1, a2, a3);
}

constexpr char GoannaEditable::OnDefaultKeyEvent_t::name[];
constexpr char GoannaEditable::OnDefaultKeyEvent_t::signature[];

auto GoannaEditable::OnDefaultKeyEvent(mozilla::jni::Object::Param a0) const -> void
{
    return mozilla::jni::Method<OnDefaultKeyEvent_t>::Call(GoannaEditable::mCtx, nullptr, a0);
}

constexpr char GoannaEditable::OnImeAddCompositionRange_t::name[];
constexpr char GoannaEditable::OnImeAddCompositionRange_t::signature[];

constexpr char GoannaEditable::OnImeReplaceText_t::name[];
constexpr char GoannaEditable::OnImeReplaceText_t::signature[];

constexpr char GoannaEditable::OnImeRequestCursorUpdates_t::name[];
constexpr char GoannaEditable::OnImeRequestCursorUpdates_t::signature[];

constexpr char GoannaEditable::OnImeSynchronize_t::name[];
constexpr char GoannaEditable::OnImeSynchronize_t::signature[];

constexpr char GoannaEditable::OnImeUpdateComposition_t::name[];
constexpr char GoannaEditable::OnImeUpdateComposition_t::signature[];

constexpr char GoannaEditable::OnKeyEvent_t::name[];
constexpr char GoannaEditable::OnKeyEvent_t::signature[];

constexpr char GoannaEditable::OnSelectionChange_t::name[];
constexpr char GoannaEditable::OnSelectionChange_t::signature[];

auto GoannaEditable::OnSelectionChange(int32_t a0, int32_t a1) const -> void
{
    return mozilla::jni::Method<OnSelectionChange_t>::Call(GoannaEditable::mCtx, nullptr, a0, a1);
}

constexpr char GoannaEditable::OnTextChange_t::name[];
constexpr char GoannaEditable::OnTextChange_t::signature[];

auto GoannaEditable::OnTextChange(mozilla::jni::String::Param a0, int32_t a1, int32_t a2, int32_t a3) const -> void
{
    return mozilla::jni::Method<OnTextChange_t>::Call(GoannaEditable::mCtx, nullptr, a0, a1, a2, a3);
}

constexpr char GoannaEditable::OnViewChange_t::name[];
constexpr char GoannaEditable::OnViewChange_t::signature[];

auto GoannaEditable::OnViewChange(mozilla::jni::Object::Param a0) const -> void
{
    return mozilla::jni::Method<OnViewChange_t>::Call(GoannaEditable::mCtx, nullptr, a0);
}

constexpr char GoannaEditable::UpdateCompositionRects_t::name[];
constexpr char GoannaEditable::UpdateCompositionRects_t::signature[];

auto GoannaEditable::UpdateCompositionRects(mozilla::jni::ObjectArray::Param a0) const -> void
{
    return mozilla::jni::Method<UpdateCompositionRects_t>::Call(GoannaEditable::mCtx, nullptr, a0);
}

const char GoannaEditableListener::name[] =
        "org/mozilla/goanna/GoannaEditableListener";

const char GoannaNetworkManager::name[] =
        "org/mozilla/goanna/GoannaNetworkManager";

constexpr char GoannaNetworkManager::OnConnectionChanged_t::name[];
constexpr char GoannaNetworkManager::OnConnectionChanged_t::signature[];

constexpr char GoannaNetworkManager::OnStatusChanged_t::name[];
constexpr char GoannaNetworkManager::OnStatusChanged_t::signature[];

const char GoannaScreenOrientation::name[] =
        "org/mozilla/goanna/GoannaScreenOrientation";

constexpr char GoannaScreenOrientation::OnOrientationChange_t::name[];
constexpr char GoannaScreenOrientation::OnOrientationChange_t::signature[];

const char GoannaThread::name[] =
        "org/mozilla/goanna/GoannaThread";

constexpr char GoannaThread::CheckAndSetState_t::name[];
constexpr char GoannaThread::CheckAndSetState_t::signature[];

auto GoannaThread::CheckAndSetState(mozilla::jni::Object::Param a0, mozilla::jni::Object::Param a1) -> bool
{
    return mozilla::jni::Method<CheckAndSetState_t>::Call(GoannaThread::Context(), nullptr, a0, a1);
}

constexpr char GoannaThread::CreateServices_t::name[];
constexpr char GoannaThread::CreateServices_t::signature[];

constexpr char GoannaThread::OnPause_t::name[];
constexpr char GoannaThread::OnPause_t::signature[];

constexpr char GoannaThread::OnResume_t::name[];
constexpr char GoannaThread::OnResume_t::signature[];

constexpr char GoannaThread::PumpMessageLoop_t::name[];
constexpr char GoannaThread::PumpMessageLoop_t::signature[];

auto GoannaThread::PumpMessageLoop(mozilla::jni::Object::Param a0) -> bool
{
    return mozilla::jni::Method<PumpMessageLoop_t>::Call(GoannaThread::Context(), nullptr, a0);
}

constexpr char GoannaThread::RequestUiThreadCallback_t::name[];
constexpr char GoannaThread::RequestUiThreadCallback_t::signature[];

auto GoannaThread::RequestUiThreadCallback(int64_t a0) -> void
{
    return mozilla::jni::Method<RequestUiThreadCallback_t>::Call(GoannaThread::Context(), nullptr, a0);
}

constexpr char GoannaThread::RunUiThreadCallback_t::name[];
constexpr char GoannaThread::RunUiThreadCallback_t::signature[];

constexpr char GoannaThread::SetState_t::name[];
constexpr char GoannaThread::SetState_t::signature[];

auto GoannaThread::SetState(mozilla::jni::Object::Param a0) -> void
{
    return mozilla::jni::Method<SetState_t>::Call(GoannaThread::Context(), nullptr, a0);
}

constexpr char GoannaThread::SpeculativeConnect_t::name[];
constexpr char GoannaThread::SpeculativeConnect_t::signature[];

constexpr char GoannaThread::WaitOnGoanna_t::name[];
constexpr char GoannaThread::WaitOnGoanna_t::signature[];

constexpr char GoannaThread::ClsLoader_t::name[];
constexpr char GoannaThread::ClsLoader_t::signature[];

auto GoannaThread::ClsLoader() -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Field<ClsLoader_t>::Get(GoannaThread::Context(), nullptr);
}

constexpr char GoannaThread::MsgQueue_t::name[];
constexpr char GoannaThread::MsgQueue_t::signature[];

auto GoannaThread::MsgQueue() -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Field<MsgQueue_t>::Get(GoannaThread::Context(), nullptr);
}

auto GoannaThread::MsgQueue(mozilla::jni::Object::Param a0) -> void
{
    return mozilla::jni::Field<MsgQueue_t>::Set(GoannaThread::Context(), nullptr, a0);
}

const char GoannaThread::State::name[] =
        "org/mozilla/goanna/GoannaThread$State";

constexpr char GoannaThread::State::EXITED_t::name[];
constexpr char GoannaThread::State::EXITED_t::signature[];

auto GoannaThread::State::EXITED() -> State::LocalRef
{
    return mozilla::jni::Field<EXITED_t>::Get(State::Context(), nullptr);
}

constexpr char GoannaThread::State::EXITING_t::name[];
constexpr char GoannaThread::State::EXITING_t::signature[];

auto GoannaThread::State::EXITING() -> State::LocalRef
{
    return mozilla::jni::Field<EXITING_t>::Get(State::Context(), nullptr);
}

constexpr char GoannaThread::State::INITIAL_t::name[];
constexpr char GoannaThread::State::INITIAL_t::signature[];

auto GoannaThread::State::INITIAL() -> State::LocalRef
{
    return mozilla::jni::Field<INITIAL_t>::Get(State::Context(), nullptr);
}

constexpr char GoannaThread::State::JNI_READY_t::name[];
constexpr char GoannaThread::State::JNI_READY_t::signature[];

auto GoannaThread::State::JNI_READY() -> State::LocalRef
{
    return mozilla::jni::Field<JNI_READY_t>::Get(State::Context(), nullptr);
}

constexpr char GoannaThread::State::LAUNCHED_t::name[];
constexpr char GoannaThread::State::LAUNCHED_t::signature[];

auto GoannaThread::State::LAUNCHED() -> State::LocalRef
{
    return mozilla::jni::Field<LAUNCHED_t>::Get(State::Context(), nullptr);
}

constexpr char GoannaThread::State::LIBS_READY_t::name[];
constexpr char GoannaThread::State::LIBS_READY_t::signature[];

auto GoannaThread::State::LIBS_READY() -> State::LocalRef
{
    return mozilla::jni::Field<LIBS_READY_t>::Get(State::Context(), nullptr);
}

constexpr char GoannaThread::State::MOZGLUE_READY_t::name[];
constexpr char GoannaThread::State::MOZGLUE_READY_t::signature[];

auto GoannaThread::State::MOZGLUE_READY() -> State::LocalRef
{
    return mozilla::jni::Field<MOZGLUE_READY_t>::Get(State::Context(), nullptr);
}

constexpr char GoannaThread::State::PROFILE_READY_t::name[];
constexpr char GoannaThread::State::PROFILE_READY_t::signature[];

auto GoannaThread::State::PROFILE_READY() -> State::LocalRef
{
    return mozilla::jni::Field<PROFILE_READY_t>::Get(State::Context(), nullptr);
}

constexpr char GoannaThread::State::RUNNING_t::name[];
constexpr char GoannaThread::State::RUNNING_t::signature[];

auto GoannaThread::State::RUNNING() -> State::LocalRef
{
    return mozilla::jni::Field<RUNNING_t>::Get(State::Context(), nullptr);
}

const char GoannaView::name[] =
        "org/mozilla/goanna/GoannaView";

const char GoannaView::Window::name[] =
        "org/mozilla/goanna/GoannaView$Window";

constexpr char GoannaView::Window::Close_t::name[];
constexpr char GoannaView::Window::Close_t::signature[];

constexpr char GoannaView::Window::DisposeNative_t::name[];
constexpr char GoannaView::Window::DisposeNative_t::signature[];

constexpr char GoannaView::Window::LoadUri_t::name[];
constexpr char GoannaView::Window::LoadUri_t::signature[];

constexpr char GoannaView::Window::Open_t::name[];
constexpr char GoannaView::Window::Open_t::signature[];

constexpr char GoannaView::Window::Reattach_t::name[];
constexpr char GoannaView::Window::Reattach_t::signature[];

const char PrefsHelper::name[] =
        "org/mozilla/goanna/PrefsHelper";

constexpr char PrefsHelper::CallPrefHandler_t::name[];
constexpr char PrefsHelper::CallPrefHandler_t::signature[];

auto PrefsHelper::CallPrefHandler(mozilla::jni::Object::Param a0, int32_t a1, mozilla::jni::String::Param a2, bool a3, int32_t a4, mozilla::jni::String::Param a5) -> void
{
    return mozilla::jni::Method<CallPrefHandler_t>::Call(PrefsHelper::Context(), nullptr, a0, a1, a2, a3, a4, a5);
}

constexpr char PrefsHelper::AddObserver_t::name[];
constexpr char PrefsHelper::AddObserver_t::signature[];

constexpr char PrefsHelper::GetPrefs_t::name[];
constexpr char PrefsHelper::GetPrefs_t::signature[];

constexpr char PrefsHelper::RemoveObserver_t::name[];
constexpr char PrefsHelper::RemoveObserver_t::signature[];

constexpr char PrefsHelper::SetPref_t::name[];
constexpr char PrefsHelper::SetPref_t::signature[];

constexpr char PrefsHelper::OnPrefChange_t::name[];
constexpr char PrefsHelper::OnPrefChange_t::signature[];

auto PrefsHelper::OnPrefChange(mozilla::jni::String::Param a0, int32_t a1, bool a2, int32_t a3, mozilla::jni::String::Param a4) -> void
{
    return mozilla::jni::Method<OnPrefChange_t>::Call(PrefsHelper::Context(), nullptr, a0, a1, a2, a3, a4);
}

const char ScreenManagerHelper::name[] =
        "org/mozilla/goanna/ScreenManagerHelper";

constexpr char ScreenManagerHelper::AddDisplay_t::name[];
constexpr char ScreenManagerHelper::AddDisplay_t::signature[];

constexpr char ScreenManagerHelper::RemoveDisplay_t::name[];
constexpr char ScreenManagerHelper::RemoveDisplay_t::signature[];

const char SurfaceTextureListener::name[] =
        "org/mozilla/goanna/SurfaceTextureListener";

constexpr char SurfaceTextureListener::New_t::name[];
constexpr char SurfaceTextureListener::New_t::signature[];

auto SurfaceTextureListener::New() -> SurfaceTextureListener::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(SurfaceTextureListener::Context(), nullptr);
}

constexpr char SurfaceTextureListener::OnFrameAvailable_t::name[];
constexpr char SurfaceTextureListener::OnFrameAvailable_t::signature[];

const char GoannaLayerClient::name[] =
        "org/mozilla/goanna/gfx/GoannaLayerClient";

constexpr char GoannaLayerClient::ContentDocumentChanged_t::name[];
constexpr char GoannaLayerClient::ContentDocumentChanged_t::signature[];

auto GoannaLayerClient::ContentDocumentChanged() const -> void
{
    return mozilla::jni::Method<ContentDocumentChanged_t>::Call(GoannaLayerClient::mCtx, nullptr);
}

constexpr char GoannaLayerClient::CreateFrame_t::name[];
constexpr char GoannaLayerClient::CreateFrame_t::signature[];

auto GoannaLayerClient::CreateFrame() const -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<CreateFrame_t>::Call(GoannaLayerClient::mCtx, nullptr);
}

constexpr char GoannaLayerClient::IsContentDocumentDisplayed_t::name[];
constexpr char GoannaLayerClient::IsContentDocumentDisplayed_t::signature[];

auto GoannaLayerClient::IsContentDocumentDisplayed() const -> bool
{
    return mozilla::jni::Method<IsContentDocumentDisplayed_t>::Call(GoannaLayerClient::mCtx, nullptr);
}

constexpr char GoannaLayerClient::OnGoannaReady_t::name[];
constexpr char GoannaLayerClient::OnGoannaReady_t::signature[];

auto GoannaLayerClient::OnGoannaReady() const -> void
{
    return mozilla::jni::Method<OnGoannaReady_t>::Call(GoannaLayerClient::mCtx, nullptr);
}

constexpr char GoannaLayerClient::SetFirstPaintViewport_t::name[];
constexpr char GoannaLayerClient::SetFirstPaintViewport_t::signature[];

auto GoannaLayerClient::SetFirstPaintViewport(float a0, float a1, float a2, float a3, float a4, float a5, float a6) const -> void
{
    return mozilla::jni::Method<SetFirstPaintViewport_t>::Call(GoannaLayerClient::mCtx, nullptr, a0, a1, a2, a3, a4, a5, a6);
}

constexpr char GoannaLayerClient::SyncFrameMetrics_t::name[];
constexpr char GoannaLayerClient::SyncFrameMetrics_t::signature[];

auto GoannaLayerClient::SyncFrameMetrics(float a0, float a1, float a2, float a3, float a4, float a5, float a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, float a11, bool a12, int32_t a13) const -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<SyncFrameMetrics_t>::Call(GoannaLayerClient::mCtx, nullptr, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

constexpr char GoannaLayerClient::SynthesizeNativeMouseEvent_t::name[];
constexpr char GoannaLayerClient::SynthesizeNativeMouseEvent_t::signature[];

auto GoannaLayerClient::SynthesizeNativeMouseEvent(int32_t a0, int32_t a1, int32_t a2) const -> void
{
    return mozilla::jni::Method<SynthesizeNativeMouseEvent_t>::Call(GoannaLayerClient::mCtx, nullptr, a0, a1, a2);
}

constexpr char GoannaLayerClient::SynthesizeNativeTouchPoint_t::name[];
constexpr char GoannaLayerClient::SynthesizeNativeTouchPoint_t::signature[];

auto GoannaLayerClient::SynthesizeNativeTouchPoint(int32_t a0, int32_t a1, int32_t a2, int32_t a3, double a4, int32_t a5) const -> void
{
    return mozilla::jni::Method<SynthesizeNativeTouchPoint_t>::Call(GoannaLayerClient::mCtx, nullptr, a0, a1, a2, a3, a4, a5);
}

constexpr char GoannaLayerClient::ClearColor_t::name[];
constexpr char GoannaLayerClient::ClearColor_t::signature[];

auto GoannaLayerClient::ClearColor() const -> int32_t
{
    return mozilla::jni::Field<ClearColor_t>::Get(GoannaLayerClient::mCtx, nullptr);
}

auto GoannaLayerClient::ClearColor(int32_t a0) const -> void
{
    return mozilla::jni::Field<ClearColor_t>::Set(GoannaLayerClient::mCtx, nullptr, a0);
}

const char ImmutableViewportMetrics::name[] =
        "org/mozilla/goanna/gfx/ImmutableViewportMetrics";

constexpr char ImmutableViewportMetrics::New_t::name[];
constexpr char ImmutableViewportMetrics::New_t::signature[];

auto ImmutableViewportMetrics::New(float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, int32_t a10, int32_t a11, float a12) -> ImmutableViewportMetrics::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(ImmutableViewportMetrics::Context(), nullptr, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

const char LayerRenderer::name[] =
        "org/mozilla/goanna/gfx/LayerRenderer";

const char LayerRenderer::Frame::name[] =
        "org/mozilla/goanna/gfx/LayerRenderer$Frame";

constexpr char LayerRenderer::Frame::BeginDrawing_t::name[];
constexpr char LayerRenderer::Frame::BeginDrawing_t::signature[];

auto LayerRenderer::Frame::BeginDrawing() const -> void
{
    return mozilla::jni::Method<BeginDrawing_t>::Call(Frame::mCtx, nullptr);
}

constexpr char LayerRenderer::Frame::EndDrawing_t::name[];
constexpr char LayerRenderer::Frame::EndDrawing_t::signature[];

auto LayerRenderer::Frame::EndDrawing() const -> void
{
    return mozilla::jni::Method<EndDrawing_t>::Call(Frame::mCtx, nullptr);
}

const char LayerView::name[] =
        "org/mozilla/goanna/gfx/LayerView";

constexpr char LayerView::GetCompositor_t::name[];
constexpr char LayerView::GetCompositor_t::signature[];

auto LayerView::GetCompositor() const -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<GetCompositor_t>::Call(LayerView::mCtx, nullptr);
}

constexpr char LayerView::UpdateZoomedView_t::name[];
constexpr char LayerView::UpdateZoomedView_t::signature[];

auto LayerView::UpdateZoomedView(mozilla::jni::ByteBuffer::Param a0) -> void
{
    return mozilla::jni::Method<UpdateZoomedView_t>::Call(LayerView::Context(), nullptr, a0);
}

constexpr char LayerView::CompositorCreated_t::name[];
constexpr char LayerView::CompositorCreated_t::signature[];

auto LayerView::CompositorCreated() const -> bool
{
    return mozilla::jni::Field<CompositorCreated_t>::Get(LayerView::mCtx, nullptr);
}

auto LayerView::CompositorCreated(bool a0) const -> void
{
    return mozilla::jni::Field<CompositorCreated_t>::Set(LayerView::mCtx, nullptr, a0);
}

const char LayerView::Compositor::name[] =
        "org/mozilla/goanna/gfx/LayerView$Compositor";

constexpr char LayerView::Compositor::AttachToJava_t::name[];
constexpr char LayerView::Compositor::AttachToJava_t::signature[];

constexpr char LayerView::Compositor::CreateCompositor_t::name[];
constexpr char LayerView::Compositor::CreateCompositor_t::signature[];

constexpr char LayerView::Compositor::Destroy_t::name[];
constexpr char LayerView::Compositor::Destroy_t::signature[];

auto LayerView::Compositor::Destroy() const -> void
{
    return mozilla::jni::Method<Destroy_t>::Call(Compositor::mCtx, nullptr);
}

constexpr char LayerView::Compositor::DisposeNative_t::name[];
constexpr char LayerView::Compositor::DisposeNative_t::signature[];

constexpr char LayerView::Compositor::OnSizeChanged_t::name[];
constexpr char LayerView::Compositor::OnSizeChanged_t::signature[];

constexpr char LayerView::Compositor::Reattach_t::name[];
constexpr char LayerView::Compositor::Reattach_t::signature[];

auto LayerView::Compositor::Reattach() const -> void
{
    return mozilla::jni::Method<Reattach_t>::Call(Compositor::mCtx, nullptr);
}

constexpr char LayerView::Compositor::SyncInvalidateAndScheduleComposite_t::name[];
constexpr char LayerView::Compositor::SyncInvalidateAndScheduleComposite_t::signature[];

constexpr char LayerView::Compositor::SyncPauseCompositor_t::name[];
constexpr char LayerView::Compositor::SyncPauseCompositor_t::signature[];

constexpr char LayerView::Compositor::SyncResumeResizeCompositor_t::name[];
constexpr char LayerView::Compositor::SyncResumeResizeCompositor_t::signature[];

const char NativePanZoomController::name[] =
        "org/mozilla/goanna/gfx/NativePanZoomController";

constexpr char NativePanZoomController::AdjustScrollForSurfaceShift_t::name[];
constexpr char NativePanZoomController::AdjustScrollForSurfaceShift_t::signature[];

constexpr char NativePanZoomController::Destroy_t::name[];
constexpr char NativePanZoomController::Destroy_t::signature[];

auto NativePanZoomController::Destroy() const -> void
{
    return mozilla::jni::Method<Destroy_t>::Call(NativePanZoomController::mCtx, nullptr);
}

constexpr char NativePanZoomController::DisposeNative_t::name[];
constexpr char NativePanZoomController::DisposeNative_t::signature[];

constexpr char NativePanZoomController::HandleMotionEvent_t::name[];
constexpr char NativePanZoomController::HandleMotionEvent_t::signature[];

constexpr char NativePanZoomController::HandleMotionEventVelocity_t::name[];
constexpr char NativePanZoomController::HandleMotionEventVelocity_t::signature[];

constexpr char NativePanZoomController::HandleMouseEvent_t::name[];
constexpr char NativePanZoomController::HandleMouseEvent_t::signature[];

constexpr char NativePanZoomController::HandleScrollEvent_t::name[];
constexpr char NativePanZoomController::HandleScrollEvent_t::signature[];

constexpr char NativePanZoomController::SetIsLongpressEnabled_t::name[];
constexpr char NativePanZoomController::SetIsLongpressEnabled_t::signature[];

constexpr char NativePanZoomController::OnSelectionDragState_t::name[];
constexpr char NativePanZoomController::OnSelectionDragState_t::signature[];

auto NativePanZoomController::OnSelectionDragState(bool a0) const -> void
{
    return mozilla::jni::Method<OnSelectionDragState_t>::Call(NativePanZoomController::mCtx, nullptr, a0);
}

constexpr char NativePanZoomController::SetScrollingRootContent_t::name[];
constexpr char NativePanZoomController::SetScrollingRootContent_t::signature[];

auto NativePanZoomController::SetScrollingRootContent(bool a0) const -> void
{
    return mozilla::jni::Method<SetScrollingRootContent_t>::Call(NativePanZoomController::mCtx, nullptr, a0);
}

constexpr char NativePanZoomController::UpdateOverscrollOffset_t::name[];
constexpr char NativePanZoomController::UpdateOverscrollOffset_t::signature[];

auto NativePanZoomController::UpdateOverscrollOffset(float a0, float a1) const -> void
{
    return mozilla::jni::Method<UpdateOverscrollOffset_t>::Call(NativePanZoomController::mCtx, nullptr, a0, a1);
}

constexpr char NativePanZoomController::UpdateOverscrollVelocity_t::name[];
constexpr char NativePanZoomController::UpdateOverscrollVelocity_t::signature[];

auto NativePanZoomController::UpdateOverscrollVelocity(float a0, float a1) const -> void
{
    return mozilla::jni::Method<UpdateOverscrollVelocity_t>::Call(NativePanZoomController::mCtx, nullptr, a0, a1);
}

const char StackScroller::name[] =
        "org/mozilla/goanna/gfx/StackScroller";

constexpr char StackScroller::New_t::name[];
constexpr char StackScroller::New_t::signature[];

auto StackScroller::New(mozilla::jni::Object::Param a0, StackScroller::LocalRef* a1) -> nsresult
{
    MOZ_ASSERT(a1);
    nsresult rv = NS_OK;
    *a1 = mozilla::jni::Constructor<New_t>::Call(StackScroller::Context(), &rv, a0);
    return rv;
}

constexpr char StackScroller::AbortAnimation_t::name[];
constexpr char StackScroller::AbortAnimation_t::signature[];

auto StackScroller::AbortAnimation() const -> nsresult
{
    nsresult rv = NS_OK;
    mozilla::jni::Method<AbortAnimation_t>::Call(StackScroller::mCtx, &rv);
    return rv;
}

constexpr char StackScroller::ComputeScrollOffset_t::name[];
constexpr char StackScroller::ComputeScrollOffset_t::signature[];

auto StackScroller::ComputeScrollOffset(int64_t a0, bool* a1) const -> nsresult
{
    MOZ_ASSERT(a1);
    nsresult rv = NS_OK;
    *a1 = mozilla::jni::Method<ComputeScrollOffset_t>::Call(StackScroller::mCtx, &rv, a0);
    return rv;
}

constexpr char StackScroller::Fling_t::name[];
constexpr char StackScroller::Fling_t::signature[];

auto StackScroller::Fling(int32_t a0, int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int64_t a10) const -> nsresult
{
    nsresult rv = NS_OK;
    mozilla::jni::Method<Fling_t>::Call(StackScroller::mCtx, &rv, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    return rv;
}

constexpr char StackScroller::ForceFinished_t::name[];
constexpr char StackScroller::ForceFinished_t::signature[];

auto StackScroller::ForceFinished(bool a0) const -> nsresult
{
    nsresult rv = NS_OK;
    mozilla::jni::Method<ForceFinished_t>::Call(StackScroller::mCtx, &rv, a0);
    return rv;
}

constexpr char StackScroller::GetCurrSpeedX_t::name[];
constexpr char StackScroller::GetCurrSpeedX_t::signature[];

auto StackScroller::GetCurrSpeedX(float* a0) const -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Method<GetCurrSpeedX_t>::Call(StackScroller::mCtx, &rv);
    return rv;
}

constexpr char StackScroller::GetCurrSpeedY_t::name[];
constexpr char StackScroller::GetCurrSpeedY_t::signature[];

auto StackScroller::GetCurrSpeedY(float* a0) const -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Method<GetCurrSpeedY_t>::Call(StackScroller::mCtx, &rv);
    return rv;
}

constexpr char StackScroller::GetCurrX_t::name[];
constexpr char StackScroller::GetCurrX_t::signature[];

auto StackScroller::GetCurrX(int32_t* a0) const -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Method<GetCurrX_t>::Call(StackScroller::mCtx, &rv);
    return rv;
}

constexpr char StackScroller::GetCurrY_t::name[];
constexpr char StackScroller::GetCurrY_t::signature[];

auto StackScroller::GetCurrY(int32_t* a0) const -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Method<GetCurrY_t>::Call(StackScroller::mCtx, &rv);
    return rv;
}

constexpr char StackScroller::GetFinalX_t::name[];
constexpr char StackScroller::GetFinalX_t::signature[];

auto StackScroller::GetFinalX(int32_t* a0) const -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Method<GetFinalX_t>::Call(StackScroller::mCtx, &rv);
    return rv;
}

constexpr char StackScroller::GetFinalY_t::name[];
constexpr char StackScroller::GetFinalY_t::signature[];

auto StackScroller::GetFinalY(int32_t* a0) const -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Method<GetFinalY_t>::Call(StackScroller::mCtx, &rv);
    return rv;
}

constexpr char StackScroller::InitContants_t::name[];
constexpr char StackScroller::InitContants_t::signature[];

auto StackScroller::InitContants() -> nsresult
{
    nsresult rv = NS_OK;
    mozilla::jni::Method<InitContants_t>::Call(StackScroller::Context(), &rv);
    return rv;
}

constexpr char StackScroller::IsFinished_t::name[];
constexpr char StackScroller::IsFinished_t::signature[];

auto StackScroller::IsFinished(bool* a0) const -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Method<IsFinished_t>::Call(StackScroller::mCtx, &rv);
    return rv;
}

constexpr char StackScroller::SetFinalX_t::name[];
constexpr char StackScroller::SetFinalX_t::signature[];

auto StackScroller::SetFinalX(int32_t a0) const -> nsresult
{
    nsresult rv = NS_OK;
    mozilla::jni::Method<SetFinalX_t>::Call(StackScroller::mCtx, &rv, a0);
    return rv;
}

constexpr char StackScroller::SpringBack_t::name[];
constexpr char StackScroller::SpringBack_t::signature[];

auto StackScroller::SpringBack(int32_t a0, int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int64_t a6, bool* a7) const -> nsresult
{
    MOZ_ASSERT(a7);
    nsresult rv = NS_OK;
    *a7 = mozilla::jni::Method<SpringBack_t>::Call(StackScroller::mCtx, &rv, a0, a1, a2, a3, a4, a5, a6);
    return rv;
}

constexpr char StackScroller::StartScroll_t::name[];
constexpr char StackScroller::StartScroll_t::signature[];

auto StackScroller::StartScroll(int32_t a0, int32_t a1, int32_t a2, int32_t a3, int64_t a4, int32_t a5) const -> nsresult
{
    nsresult rv = NS_OK;
    mozilla::jni::Method<StartScroll_t>::Call(StackScroller::mCtx, &rv, a0, a1, a2, a3, a4, a5);
    return rv;
}

constexpr char StackScroller::ViscousFluid_t::name[];
constexpr char StackScroller::ViscousFluid_t::signature[];

auto StackScroller::ViscousFluid(float a0, float* a1) -> nsresult
{
    MOZ_ASSERT(a1);
    nsresult rv = NS_OK;
    *a1 = mozilla::jni::Method<ViscousFluid_t>::Call(StackScroller::Context(), &rv, a0);
    return rv;
}

constexpr char StackScroller::MFlywheel_t::name[];
constexpr char StackScroller::MFlywheel_t::signature[];

auto StackScroller::MFlywheel(bool* a0) const -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Field<MFlywheel_t>::Get(StackScroller::mCtx, &rv);
    return rv;
}

constexpr char StackScroller::MMode_t::name[];
constexpr char StackScroller::MMode_t::signature[];

auto StackScroller::MMode(int32_t* a0) const -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Field<MMode_t>::Get(StackScroller::mCtx, &rv);
    return rv;
}

auto StackScroller::MMode(int32_t a0) const -> nsresult
{
    nsresult rv = NS_OK;
    mozilla::jni::Field<MMode_t>::Set(StackScroller::mCtx, &rv, a0);
    return rv;
}

constexpr char StackScroller::MScrollerX_t::name[];
constexpr char StackScroller::MScrollerX_t::signature[];

auto StackScroller::MScrollerX(mozilla::jni::Object::LocalRef* a0) const -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Field<MScrollerX_t>::Get(StackScroller::mCtx, &rv);
    return rv;
}

constexpr char StackScroller::MScrollerY_t::name[];
constexpr char StackScroller::MScrollerY_t::signature[];

auto StackScroller::MScrollerY(mozilla::jni::Object::LocalRef* a0) const -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Field<MScrollerY_t>::Get(StackScroller::mCtx, &rv);
    return rv;
}

constexpr char StackScroller::SViscousFluidNormalize_t::name[];
constexpr char StackScroller::SViscousFluidNormalize_t::signature[];

auto StackScroller::SViscousFluidNormalize(float* a0) -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Field<SViscousFluidNormalize_t>::Get(StackScroller::Context(), &rv);
    return rv;
}

auto StackScroller::SViscousFluidNormalize(float a0) -> nsresult
{
    nsresult rv = NS_OK;
    mozilla::jni::Field<SViscousFluidNormalize_t>::Set(StackScroller::Context(), &rv, a0);
    return rv;
}

constexpr char StackScroller::SViscousFluidScale_t::name[];
constexpr char StackScroller::SViscousFluidScale_t::signature[];

auto StackScroller::SViscousFluidScale(float* a0) -> nsresult
{
    MOZ_ASSERT(a0);
    nsresult rv = NS_OK;
    *a0 = mozilla::jni::Field<SViscousFluidScale_t>::Get(StackScroller::Context(), &rv);
    return rv;
}

auto StackScroller::SViscousFluidScale(float a0) -> nsresult
{
    nsresult rv = NS_OK;
    mozilla::jni::Field<SViscousFluidScale_t>::Set(StackScroller::Context(), &rv, a0);
    return rv;
}

const char ViewTransform::name[] =
        "org/mozilla/goanna/gfx/ViewTransform";

constexpr char ViewTransform::New_t::name[];
constexpr char ViewTransform::New_t::signature[];

auto ViewTransform::New(float a0, float a1, float a2) -> ViewTransform::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(ViewTransform::Context(), nullptr, a0, a1, a2);
}

constexpr char ViewTransform::FixedLayerMarginBottom_t::name[];
constexpr char ViewTransform::FixedLayerMarginBottom_t::signature[];

auto ViewTransform::FixedLayerMarginBottom() const -> float
{
    return mozilla::jni::Field<FixedLayerMarginBottom_t>::Get(ViewTransform::mCtx, nullptr);
}

auto ViewTransform::FixedLayerMarginBottom(float a0) const -> void
{
    return mozilla::jni::Field<FixedLayerMarginBottom_t>::Set(ViewTransform::mCtx, nullptr, a0);
}

constexpr char ViewTransform::FixedLayerMarginLeft_t::name[];
constexpr char ViewTransform::FixedLayerMarginLeft_t::signature[];

auto ViewTransform::FixedLayerMarginLeft() const -> float
{
    return mozilla::jni::Field<FixedLayerMarginLeft_t>::Get(ViewTransform::mCtx, nullptr);
}

auto ViewTransform::FixedLayerMarginLeft(float a0) const -> void
{
    return mozilla::jni::Field<FixedLayerMarginLeft_t>::Set(ViewTransform::mCtx, nullptr, a0);
}

constexpr char ViewTransform::FixedLayerMarginRight_t::name[];
constexpr char ViewTransform::FixedLayerMarginRight_t::signature[];

auto ViewTransform::FixedLayerMarginRight() const -> float
{
    return mozilla::jni::Field<FixedLayerMarginRight_t>::Get(ViewTransform::mCtx, nullptr);
}

auto ViewTransform::FixedLayerMarginRight(float a0) const -> void
{
    return mozilla::jni::Field<FixedLayerMarginRight_t>::Set(ViewTransform::mCtx, nullptr, a0);
}

constexpr char ViewTransform::FixedLayerMarginTop_t::name[];
constexpr char ViewTransform::FixedLayerMarginTop_t::signature[];

auto ViewTransform::FixedLayerMarginTop() const -> float
{
    return mozilla::jni::Field<FixedLayerMarginTop_t>::Get(ViewTransform::mCtx, nullptr);
}

auto ViewTransform::FixedLayerMarginTop(float a0) const -> void
{
    return mozilla::jni::Field<FixedLayerMarginTop_t>::Set(ViewTransform::mCtx, nullptr, a0);
}

constexpr char ViewTransform::Height_t::name[];
constexpr char ViewTransform::Height_t::signature[];

auto ViewTransform::Height() const -> float
{
    return mozilla::jni::Field<Height_t>::Get(ViewTransform::mCtx, nullptr);
}

auto ViewTransform::Height(float a0) const -> void
{
    return mozilla::jni::Field<Height_t>::Set(ViewTransform::mCtx, nullptr, a0);
}

constexpr char ViewTransform::Scale_t::name[];
constexpr char ViewTransform::Scale_t::signature[];

auto ViewTransform::Scale() const -> float
{
    return mozilla::jni::Field<Scale_t>::Get(ViewTransform::mCtx, nullptr);
}

auto ViewTransform::Scale(float a0) const -> void
{
    return mozilla::jni::Field<Scale_t>::Set(ViewTransform::mCtx, nullptr, a0);
}

constexpr char ViewTransform::Width_t::name[];
constexpr char ViewTransform::Width_t::signature[];

auto ViewTransform::Width() const -> float
{
    return mozilla::jni::Field<Width_t>::Get(ViewTransform::mCtx, nullptr);
}

auto ViewTransform::Width(float a0) const -> void
{
    return mozilla::jni::Field<Width_t>::Set(ViewTransform::mCtx, nullptr, a0);
}

constexpr char ViewTransform::X_t::name[];
constexpr char ViewTransform::X_t::signature[];

auto ViewTransform::X() const -> float
{
    return mozilla::jni::Field<X_t>::Get(ViewTransform::mCtx, nullptr);
}

auto ViewTransform::X(float a0) const -> void
{
    return mozilla::jni::Field<X_t>::Set(ViewTransform::mCtx, nullptr, a0);
}

constexpr char ViewTransform::Y_t::name[];
constexpr char ViewTransform::Y_t::signature[];

auto ViewTransform::Y() const -> float
{
    return mozilla::jni::Field<Y_t>::Get(ViewTransform::mCtx, nullptr);
}

auto ViewTransform::Y(float a0) const -> void
{
    return mozilla::jni::Field<Y_t>::Set(ViewTransform::mCtx, nullptr, a0);
}

const char VsyncSource::name[] =
        "org/mozilla/goanna/gfx/VsyncSource";

constexpr char VsyncSource::GetRefreshRate_t::name[];
constexpr char VsyncSource::GetRefreshRate_t::signature[];

auto VsyncSource::GetRefreshRate() const -> float
{
    return mozilla::jni::Method<GetRefreshRate_t>::Call(VsyncSource::mCtx, nullptr);
}

constexpr char VsyncSource::NotifyVsync_t::name[];
constexpr char VsyncSource::NotifyVsync_t::signature[];

constexpr char VsyncSource::ObserveVsync_t::name[];
constexpr char VsyncSource::ObserveVsync_t::signature[];

auto VsyncSource::ObserveVsync(bool a0) const -> bool
{
    return mozilla::jni::Method<ObserveVsync_t>::Call(VsyncSource::mCtx, nullptr, a0);
}

constexpr char VsyncSource::INSTANCE_t::name[];
constexpr char VsyncSource::INSTANCE_t::signature[];

auto VsyncSource::INSTANCE() -> VsyncSource::LocalRef
{
    return mozilla::jni::Field<INSTANCE_t>::Get(VsyncSource::Context(), nullptr);
}

const char Clipboard::name[] =
        "org/mozilla/goanna/util/Clipboard";

constexpr char Clipboard::ClearText_t::name[];
constexpr char Clipboard::ClearText_t::signature[];

auto Clipboard::ClearText() -> void
{
    return mozilla::jni::Method<ClearText_t>::Call(Clipboard::Context(), nullptr);
}

constexpr char Clipboard::GetText_t::name[];
constexpr char Clipboard::GetText_t::signature[];

auto Clipboard::GetText() -> mozilla::jni::String::LocalRef
{
    return mozilla::jni::Method<GetText_t>::Call(Clipboard::Context(), nullptr);
}

constexpr char Clipboard::HasText_t::name[];
constexpr char Clipboard::HasText_t::signature[];

auto Clipboard::HasText() -> bool
{
    return mozilla::jni::Method<HasText_t>::Call(Clipboard::Context(), nullptr);
}

constexpr char Clipboard::SetText_t::name[];
constexpr char Clipboard::SetText_t::signature[];

auto Clipboard::SetText(mozilla::jni::String::Param a0) -> void
{
    return mozilla::jni::Method<SetText_t>::Call(Clipboard::Context(), nullptr, a0);
}

const char EventCallback::name[] =
        "org/mozilla/goanna/util/EventCallback";

constexpr char EventCallback::SendError_t::name[];
constexpr char EventCallback::SendError_t::signature[];

auto EventCallback::SendError(mozilla::jni::Object::Param a0) const -> void
{
    return mozilla::jni::Method<SendError_t>::Call(EventCallback::mCtx, nullptr, a0);
}

constexpr char EventCallback::SendSuccess_t::name[];
constexpr char EventCallback::SendSuccess_t::signature[];

auto EventCallback::SendSuccess(mozilla::jni::Object::Param a0) const -> void
{
    return mozilla::jni::Method<SendSuccess_t>::Call(EventCallback::mCtx, nullptr, a0);
}

const char GoannaBundle::name[] =
        "org/mozilla/goanna/util/GoannaBundle";

constexpr char GoannaBundle::New_t::name[];
constexpr char GoannaBundle::New_t::signature[];

auto GoannaBundle::New(mozilla::jni::ObjectArray::Param a0, mozilla::jni::ObjectArray::Param a1) -> GoannaBundle::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(GoannaBundle::Context(), nullptr, a0, a1);
}

constexpr char GoannaBundle::Box_t::name[];
constexpr char GoannaBundle::Box_t::signature[];

auto GoannaBundle::Box(double a0) -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<Box_t>::Call(GoannaBundle::Context(), nullptr, a0);
}

constexpr char GoannaBundle::Box2_t::name[];
constexpr char GoannaBundle::Box2_t::signature[];

auto GoannaBundle::Box(int32_t a0) -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<Box2_t>::Call(GoannaBundle::Context(), nullptr, a0);
}

constexpr char GoannaBundle::Box3_t::name[];
constexpr char GoannaBundle::Box3_t::signature[];

auto GoannaBundle::Box(bool a0) -> mozilla::jni::Object::LocalRef
{
    return mozilla::jni::Method<Box3_t>::Call(GoannaBundle::Context(), nullptr, a0);
}

constexpr char GoannaBundle::Keys_t::name[];
constexpr char GoannaBundle::Keys_t::signature[];

auto GoannaBundle::Keys() const -> mozilla::jni::ObjectArray::LocalRef
{
    return mozilla::jni::Method<Keys_t>::Call(GoannaBundle::mCtx, nullptr);
}

constexpr char GoannaBundle::UnboxBoolean_t::name[];
constexpr char GoannaBundle::UnboxBoolean_t::signature[];

auto GoannaBundle::UnboxBoolean(mozilla::jni::Object::Param a0) -> bool
{
    return mozilla::jni::Method<UnboxBoolean_t>::Call(GoannaBundle::Context(), nullptr, a0);
}

constexpr char GoannaBundle::UnboxDouble_t::name[];
constexpr char GoannaBundle::UnboxDouble_t::signature[];

auto GoannaBundle::UnboxDouble(mozilla::jni::Object::Param a0) -> double
{
    return mozilla::jni::Method<UnboxDouble_t>::Call(GoannaBundle::Context(), nullptr, a0);
}

constexpr char GoannaBundle::UnboxInteger_t::name[];
constexpr char GoannaBundle::UnboxInteger_t::signature[];

auto GoannaBundle::UnboxInteger(mozilla::jni::Object::Param a0) -> int32_t
{
    return mozilla::jni::Method<UnboxInteger_t>::Call(GoannaBundle::Context(), nullptr, a0);
}

constexpr char GoannaBundle::Values_t::name[];
constexpr char GoannaBundle::Values_t::signature[];

auto GoannaBundle::Values() const -> mozilla::jni::ObjectArray::LocalRef
{
    return mozilla::jni::Method<Values_t>::Call(GoannaBundle::mCtx, nullptr);
}

constexpr char GoannaBundle::EMPTY_BOOLEAN_ARRAY_t::name[];
constexpr char GoannaBundle::EMPTY_BOOLEAN_ARRAY_t::signature[];

auto GoannaBundle::EMPTY_BOOLEAN_ARRAY() -> mozilla::jni::BooleanArray::LocalRef
{
    return mozilla::jni::Field<EMPTY_BOOLEAN_ARRAY_t>::Get(GoannaBundle::Context(), nullptr);
}

const char HardwareCodecCapabilityUtils::name[] =
        "org/mozilla/goanna/util/HardwareCodecCapabilityUtils";

constexpr char HardwareCodecCapabilityUtils::HasHWVP9_t::name[];
constexpr char HardwareCodecCapabilityUtils::HasHWVP9_t::signature[];

auto HardwareCodecCapabilityUtils::HasHWVP9() -> bool
{
    return mozilla::jni::Method<HasHWVP9_t>::Call(HardwareCodecCapabilityUtils::Context(), nullptr);
}

constexpr char HardwareCodecCapabilityUtils::CheckSupportsAdaptivePlayback_t::name[];
constexpr char HardwareCodecCapabilityUtils::CheckSupportsAdaptivePlayback_t::signature[];

auto HardwareCodecCapabilityUtils::CheckSupportsAdaptivePlayback(mozilla::jni::Object::Param a0, mozilla::jni::String::Param a1) -> bool
{
    return mozilla::jni::Method<CheckSupportsAdaptivePlayback_t>::Call(HardwareCodecCapabilityUtils::Context(), nullptr, a0, a1);
}

constexpr char HardwareCodecCapabilityUtils::FindDecoderCodecInfoForMimeType_t::name[];
constexpr char HardwareCodecCapabilityUtils::FindDecoderCodecInfoForMimeType_t::signature[];

auto HardwareCodecCapabilityUtils::FindDecoderCodecInfoForMimeType(mozilla::jni::String::Param a0) -> bool
{
    return mozilla::jni::Method<FindDecoderCodecInfoForMimeType_t>::Call(HardwareCodecCapabilityUtils::Context(), nullptr, a0);
}

const char NativeJSContainer::name[] =
        "org/mozilla/goanna/util/NativeJSContainer";

constexpr char NativeJSContainer::New_t::name[];
constexpr char NativeJSContainer::New_t::signature[];

auto NativeJSContainer::New() -> NativeJSContainer::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(NativeJSContainer::Context(), nullptr);
}

constexpr char NativeJSContainer::Clone2_t::name[];
constexpr char NativeJSContainer::Clone2_t::signature[];

constexpr char NativeJSContainer::DisposeNative_t::name[];
constexpr char NativeJSContainer::DisposeNative_t::signature[];

const char NativeJSObject::name[] =
        "org/mozilla/goanna/util/NativeJSObject";

constexpr char NativeJSObject::New_t::name[];
constexpr char NativeJSObject::New_t::signature[];

auto NativeJSObject::New() -> NativeJSObject::LocalRef
{
    return mozilla::jni::Constructor<New_t>::Call(NativeJSObject::Context(), nullptr);
}

constexpr char NativeJSObject::DisposeNative_t::name[];
constexpr char NativeJSObject::DisposeNative_t::signature[];

auto NativeJSObject::DisposeNative() const -> void
{
    return mozilla::jni::Method<DisposeNative_t>::Call(NativeJSObject::mCtx, nullptr);
}

constexpr char NativeJSObject::GetBoolean_t::name[];
constexpr char NativeJSObject::GetBoolean_t::signature[];

constexpr char NativeJSObject::GetBooleanArray_t::name[];
constexpr char NativeJSObject::GetBooleanArray_t::signature[];

constexpr char NativeJSObject::GetBundle_t::name[];
constexpr char NativeJSObject::GetBundle_t::signature[];

constexpr char NativeJSObject::GetBundleArray_t::name[];
constexpr char NativeJSObject::GetBundleArray_t::signature[];

constexpr char NativeJSObject::GetDouble_t::name[];
constexpr char NativeJSObject::GetDouble_t::signature[];

constexpr char NativeJSObject::GetDoubleArray_t::name[];
constexpr char NativeJSObject::GetDoubleArray_t::signature[];

constexpr char NativeJSObject::GetInt_t::name[];
constexpr char NativeJSObject::GetInt_t::signature[];

constexpr char NativeJSObject::GetIntArray_t::name[];
constexpr char NativeJSObject::GetIntArray_t::signature[];

constexpr char NativeJSObject::GetObject_t::name[];
constexpr char NativeJSObject::GetObject_t::signature[];

constexpr char NativeJSObject::GetObjectArray_t::name[];
constexpr char NativeJSObject::GetObjectArray_t::signature[];

constexpr char NativeJSObject::GetString_t::name[];
constexpr char NativeJSObject::GetString_t::signature[];

constexpr char NativeJSObject::GetStringArray_t::name[];
constexpr char NativeJSObject::GetStringArray_t::signature[];

constexpr char NativeJSObject::Has_t::name[];
constexpr char NativeJSObject::Has_t::signature[];

constexpr char NativeJSObject::OptBoolean_t::name[];
constexpr char NativeJSObject::OptBoolean_t::signature[];

constexpr char NativeJSObject::OptBooleanArray_t::name[];
constexpr char NativeJSObject::OptBooleanArray_t::signature[];

constexpr char NativeJSObject::OptBundle_t::name[];
constexpr char NativeJSObject::OptBundle_t::signature[];

constexpr char NativeJSObject::OptBundleArray_t::name[];
constexpr char NativeJSObject::OptBundleArray_t::signature[];

constexpr char NativeJSObject::OptDouble_t::name[];
constexpr char NativeJSObject::OptDouble_t::signature[];

constexpr char NativeJSObject::OptDoubleArray_t::name[];
constexpr char NativeJSObject::OptDoubleArray_t::signature[];

constexpr char NativeJSObject::OptInt_t::name[];
constexpr char NativeJSObject::OptInt_t::signature[];

constexpr char NativeJSObject::OptIntArray_t::name[];
constexpr char NativeJSObject::OptIntArray_t::signature[];

constexpr char NativeJSObject::OptObject_t::name[];
constexpr char NativeJSObject::OptObject_t::signature[];

constexpr char NativeJSObject::OptObjectArray_t::name[];
constexpr char NativeJSObject::OptObjectArray_t::signature[];

constexpr char NativeJSObject::OptString_t::name[];
constexpr char NativeJSObject::OptString_t::signature[];

constexpr char NativeJSObject::OptStringArray_t::name[];
constexpr char NativeJSObject::OptStringArray_t::signature[];

constexpr char NativeJSObject::ToBundle_t::name[];
constexpr char NativeJSObject::ToBundle_t::signature[];

constexpr char NativeJSObject::ToString_t::name[];
constexpr char NativeJSObject::ToString_t::signature[];

} /* java */
} /* mozilla */
